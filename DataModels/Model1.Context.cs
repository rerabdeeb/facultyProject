//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataModels
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class projectEntities : DbContext
    {
        public projectEntities()
            : base("name=projectEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Dept> Dept { get; set; }
        public virtual DbSet<Gender> Gender { get; set; }
        public virtual DbSet<Levels> Levels { get; set; }
        public virtual DbSet<Professors> Professors { get; set; }
        public virtual DbSet<ProfessorSubjects> ProfessorSubjects { get; set; }
        public virtual DbSet<Student> Student { get; set; }
        public virtual DbSet<StudentsSubjects> StudentsSubjects { get; set; }
        public virtual DbSet<Subjects> Subjects { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
    
        public virtual int InsertDataStudents(Nullable<int> levelId_FK, Nullable<decimal> nationalId, string mobile, string password, string firstName, string middleName, string surName, Nullable<int> deptId_FK, string image, Nullable<bool> isActive, Nullable<int> genderId_FK)
        {
            var levelId_FKParameter = levelId_FK.HasValue ?
                new ObjectParameter("levelId_FK", levelId_FK) :
                new ObjectParameter("levelId_FK", typeof(int));
    
            var nationalIdParameter = nationalId.HasValue ?
                new ObjectParameter("nationalId", nationalId) :
                new ObjectParameter("nationalId", typeof(decimal));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("middleName", middleName) :
                new ObjectParameter("middleName", typeof(string));
    
            var surNameParameter = surName != null ?
                new ObjectParameter("surName", surName) :
                new ObjectParameter("surName", typeof(string));
    
            var deptId_FKParameter = deptId_FK.HasValue ?
                new ObjectParameter("deptId_FK", deptId_FK) :
                new ObjectParameter("deptId_FK", typeof(int));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var genderId_FKParameter = genderId_FK.HasValue ?
                new ObjectParameter("genderId_FK", genderId_FK) :
                new ObjectParameter("genderId_FK", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDataStudents", levelId_FKParameter, nationalIdParameter, mobileParameter, passwordParameter, firstNameParameter, middleNameParameter, surNameParameter, deptId_FKParameter, imageParameter, isActiveParameter, genderId_FKParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int InsertDataStudent(Nullable<int> levelId_FK, Nullable<decimal> nationalId, string mobile, string password, string firstName, string middleName, string surName, Nullable<int> deptId_FK, string image, Nullable<bool> isActive, Nullable<int> genderId_FK)
        {
            var levelId_FKParameter = levelId_FK.HasValue ?
                new ObjectParameter("levelId_FK", levelId_FK) :
                new ObjectParameter("levelId_FK", typeof(int));
    
            var nationalIdParameter = nationalId.HasValue ?
                new ObjectParameter("nationalId", nationalId) :
                new ObjectParameter("nationalId", typeof(decimal));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("middleName", middleName) :
                new ObjectParameter("middleName", typeof(string));
    
            var surNameParameter = surName != null ?
                new ObjectParameter("surName", surName) :
                new ObjectParameter("surName", typeof(string));
    
            var deptId_FKParameter = deptId_FK.HasValue ?
                new ObjectParameter("deptId_FK", deptId_FK) :
                new ObjectParameter("deptId_FK", typeof(int));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var genderId_FKParameter = genderId_FK.HasValue ?
                new ObjectParameter("genderId_FK", genderId_FK) :
                new ObjectParameter("genderId_FK", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDataStudent", levelId_FKParameter, nationalIdParameter, mobileParameter, passwordParameter, firstNameParameter, middleNameParameter, surNameParameter, deptId_FKParameter, imageParameter, isActiveParameter, genderId_FKParameter);
        }
    
        public virtual ObjectResult<LogIN_Result> LogIN(Nullable<decimal> nationalId, string password, ObjectParameter ret)
        {
            var nationalIdParameter = nationalId.HasValue ?
                new ObjectParameter("nationalId", nationalId) :
                new ObjectParameter("nationalId", typeof(decimal));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LogIN_Result>("LogIN", nationalIdParameter, passwordParameter, ret);
        }
    
        public virtual ObjectResult<string> CheckLogin(Nullable<decimal> nationalID, string password)
        {
            var nationalIDParameter = nationalID.HasValue ?
                new ObjectParameter("nationalID", nationalID) :
                new ObjectParameter("nationalID", typeof(decimal));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CheckLogin", nationalIDParameter, passwordParameter);
        }
    }
}
